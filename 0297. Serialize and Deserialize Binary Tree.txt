/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    private int i = 0;

    public TreeNode deserializeHelper(int len, String[] arr){
        if(i == len || arr[i].equals("n")) {
            i++;
            return null;
        }
        TreeNode root = new TreeNode(Integer.valueOf(arr[i++]));
        root.left = deserializeHelper(len, arr);
        root.right = deserializeHelper(len, arr);
        return root;
    }

    public void serializeHelper(TreeNode root, StringBuffer sb){
        if(root == null) {
            sb.append("n,");
            return;
        }
        sb.append(String.valueOf(root.val) + ",");
        serializeHelper(root.left, sb);
        serializeHelper(root.right, sb);
    }

    // Encode a tree to a string.
    public String serialize(TreeNode root) {
        if(root == null) {
            return "";
        }
        StringBuffer sb = new StringBuffer();
        serializeHelper(root, sb);
        return sb.toString();
    }

    // Decode a string to a tree.
    public TreeNode deserialize(String s) {
        if(s.equals("")) {
            return null;
        }
        String[] arr = s.split(",");
        return deserializeHelper(arr.length, arr);
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));

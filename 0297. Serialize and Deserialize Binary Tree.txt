/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    private int i = 0;

    public TreeNode deserializeHelper(int len, String[] arr){
        if(i >= len || arr[i].equals("N")){
            i++;
            return null;
        } 
        TreeNode root = new TreeNode(Integer.parseInt(arr[i]));
        i++;
        root.left = deserializeHelper(len, arr);
        root.right = deserializeHelper(len, arr);
        return root;
        
    }
    public void serializeHelper(TreeNode root,StringBuffer sb){
        if(root==null) {
            sb.append(',');
            sb.append('N');
            return;
        }
        if(sb.length()==0) {
            sb.append(Integer.toString(root.val));
        }
        else {
            sb.append("," + Integer.toString(root.val));
        }
        serializeHelper(root.left, sb);
        serializeHelper(root.right, sb);
    }

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null) {
            return "";
        }
        StringBuffer sb= new StringBuffer();
        serializeHelper(root, sb);
        String res = sb.toString();
        return res;
    }

    // Decodes a string to a tree.
    public TreeNode deserialize(String data) {
        if(data == "") {
            return null;
        }
        String[] arr = data.split(",");
        TreeNode root = deserializeHelper(arr.length, arr);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));

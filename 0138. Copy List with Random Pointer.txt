/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) {
            return head;
        }
        HashMap<Node, Node> map = new HashMap<>();
        Node res = new Node(-1);
        Node newNode = res;
        Node oldNode = head;
        while (oldNode != null) {
            newNode.next = new Node(oldNode.val);
            newNode = newNode.next;
            map.put(oldNode, newNode);
            oldNode = oldNode.next;
        }
        oldNode = head;
        newNode = res.next;
        while (oldNode != null) {
            newNode.random = map.get(oldNode.random);
            oldNode = oldNode.next;
            newNode = newNode.next;
        }
        return res.next;
    }
}

// class TrieNode {
//     HashMap<Character, TrieNode> map;
//     boolean end;
//     public TrieNode() {
//         map = new HashMap<>();
//         end = false;
//     }
// }

// class Solution {
//     public static boolean exist(TrieNode root, String s) {
//         TrieNode curr = root;
//         for(char c: s.toCharArray()) {
//             if(!curr.map.containsKey(c)) {
//                 return false;
//             }
//             curr = curr.map.get(c);
//         }
//         if(curr.end) {
//             return true;
//         }
//         else {
//             return false;
//         }
//     }
//     public static boolean exist(TrieNode root, String s, int start, int end) {
//         if(end - start + 1 > s.length() || start < 0 || end > s.length() - 1) {
//             return false;
//         }
//         TrieNode curr = root;
//         for(int i = start; i <= end; i++) {
//             char c = s.charAt(i);
//             if(!curr.map.containsKey(c)) {
//                 return false;
//             }
//             curr = curr.map.get(c);
//         }
//         if(curr.end) {
//             return true;
//         }
//         else {
//             return false;
//         }
//     }

//     public static void buildTrieTree(TrieNode root, String s) {
//         TrieNode curr = root;
//         for(char c: s.toCharArray()) {
//             if(!curr.map.containsKey(c)) {
//                 curr.map.put(c, new TrieNode());
//             }
//             curr = curr.map.get(c);
//         }
//         curr.end = true;
//     }

//     public static boolean helper(TrieNode root, String s, int start, ArrayList<Integer> lenList, boolean original) {
//         if(start == s.length()) {
//             return true;
//         }
//         for(int len: lenList) {
//             if(len == s.length() && original) {
//                 continue;
//             }
//             else if(len > s.length()) {
//                 return false;
//             }
//             else {
//                 if(exist(root, s, start, start + len - 1)) {
//                     boolean res = helper(root, s, start + len, lenList, false);
//                     if(res == true) {
//                         return true;
//                     }
//                 }
//             }
//         }
//         return false;
//     }

//     public static List<String> findAllConcatenatedWordsInADict(String[] words) {
//         List<String> res = new ArrayList<>();
//         TrieNode root = new TrieNode();
//         HashMap<Integer, Boolean> map = new HashMap<>();
//         for(String s: words) {
//             buildTrieTree(root, s);
//             map.put(s.length(), true);
//         }

//         ArrayList<Integer> lenList = new ArrayList<>();
//         lenList.addAll(map.keySet());
//         Collections.sort(lenList);

//         for(String s: words) {
//             if(helper(root, s, 0, lenList, true)) {
//                 res.add(s);
//             }
//         }
//         return res;
//     }
// }

class Solution {
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        ArrayList<String> list= new ArrayList<String>();
        Trie trie = new Trie();
        for(String x:words){
            insert(x,trie);
        }
        for(String x:words){
            if(solve(x,trie,0,1,new Boolean[x.length()],0))
                list.add(x);
        }
        return list;
    }


    private boolean solve(String s,Trie trie,int i,int j,Boolean[] memo,int c){
        if(i==s.length()){
            return c>1; // more than 1 string
        }
        if(memo[i]!=null){
            return memo[i];
        }
        Trie dict = trie;
        for(int k=i;k<s.length();k++){
            dict = dict.a[s.charAt(k)-'a'];
            if(dict==null){
                return memo[i] = false;
            }
            if(dict.stop){
                if(solve(s,trie,k+1,k+2,memo,c+1))
                    return true;
            }
        }
        return memo[i] = false;
    }

    private void insert(String s,Trie trie){
        for(char ch:s.toCharArray()){
            if(trie.a[ch-'a']==null) {
                trie.a[ch-'a'] = new Trie();
            }
            trie=trie.a[ch-'a'];
        }
        trie.stop=true;
    }
}

class Trie{
    Trie[] a;
    boolean stop;

    public Trie(){
        a=new Trie[26];
        stop=false;
    }
}

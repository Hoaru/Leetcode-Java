class Solution {
    public boolean helper(int last_dir, int[][] visit, int[][] maze, int x, int y, int[] des){
        if(visit[x][y] == 1) return false;
        if(x == des[0] && y == des[1]) return true;
        else{
            int[] dir = new int[]{1,1,1,1}; if(last_dir != -1) dir[last_dir+(int)Math.pow(-1,last_dir)] = 0; if(x == 0 || maze[x-1][y] == 1 || visit[x-1][y] == 1) dir[0] = 0; if(x == maze.length-1 || maze[x+1][y] == 1 || visit[x+1][y] == 1) dir[1] = 0; if(y == 0 || maze[x][y-1] == 1 || visit[x][y-1] == 1) dir[2] = 0; if(y == maze[0].length-1 || maze[x][y+1] == 1 || visit[x][y+1] == 1) dir[3] = 0;
            
            if(dir[0] + dir[1] + dir[2] + dir[3] == 0) return false;
            
            visit[x][y] = 1; int x_ = x, y_ = y;
            
            //up
            if(dir[0] == 1){
                x = x_; y = y_; while(x != 0 && maze[x - 1][y] != 1) x -= 1;
                boolean up = helper(0, visit, maze, x, y, des);
                if(up == true) return true;
            }
            
            //down
            if(dir[1] == 1){
                x = x_; y = y_; while(x != maze.length - 1 && maze[x + 1][y] != 1) x += 1;
                boolean down = helper(1, visit, maze, x, y, des);
                if(down == true) return true;
            }
            
            //left
            if(dir[2] == 1){
                x = x_; y = y_; while(y != 0 && maze[x][y - 1] != 1) y -= 1;
                boolean left = helper(2, visit, maze, x, y, des);
                if(left == true) return true;
            }
            
            //right
            if(dir[3] == 1){
                x = x_; y = y_; while(y != maze[0].length - 1 && maze[x][y + 1] != 1) y += 1;
                boolean right = helper(3, visit, maze, x, y, des);
                if(right == true) return true;
            }
            
            return false;
        }
    }

    public boolean hasPath(int[][] maze, int[] start, int[] destination){
        //direction-up:0,down:1,left:2,right:3
        int[][] visit = new int[maze.length][maze[0].length];
        for(int i = 0; i < maze.length; i++)
            visit[i] = Arrays.copyOf(maze[i], maze[i].length);
        return helper(-1, visit, maze, start[0], start[1], destination);
    }
}
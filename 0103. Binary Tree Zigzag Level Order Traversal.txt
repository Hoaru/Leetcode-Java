/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // Time complexity: O(n)
    // Space complexity: O(n)
    
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        Stack<TreeNode> st = new Stack<>();
        st.add(root);
        boolean even = true;
        while (!st.isEmpty()) {
            ArrayList<Integer> curr = new ArrayList<>();
            Stack<TreeNode> newSt = new Stack<>();
            while (!st.isEmpty()) {
                TreeNode top = st.pop();
                if (top == null) {
                    continue;
                }
                curr.add(top.val);
                if (!even) {
                    if (top.right != null) {
                        newSt.add(top.right);
                    } 
                    if (top.left != null) {
                        newSt.add(top.left);
                    }  
                }
                else {
                    if (top.left != null) {
                        newSt.add(top.left);
                    }
                    if (top.right != null) {
                        newSt.add(top.right);
                    }   
                }
            }
            even = !even;
            res.add(curr);
            st = newSt;
        }
        return res;
    }
}

class Solution {
    // public int jump(int[] nums) {
    //     int n = nums.length;
    //     int[] dp = new int[n];
    //     Arrays.fill(dp, Integer.MAX_VALUE);
    //     dp[0] = 0;
    //     for (int i = 0; i < n; i++) {
    //         int step = nums[i];
    //         for (int j = 1; i + j < n && j <= step; j++) {
    //             dp[i + j] = Math.min(dp[i + j], dp[i] + 1);
    //         }
    //     }
    //     return dp[n - 1];
    // }

    public int jump(int[] nums) {
        int end = 0, max = 0, step = 0, n = nums.length;
        for (int i = 0; i < n - 1; i++) {
            max = Math.max(max, i + nums[i]);
            // if (max >= n - 1) {
            //     return step + 1;
            // }
            if (i == end) {
                step++;
                end = max;
            }
        }
        return step;
    }
}

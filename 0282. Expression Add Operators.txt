class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> res = new ArrayList<>();
        dfs(num, target, "", 0, 0, 0, res);
        return res;
    }
    
    // num: 输入的电话号码
    // target: 幸运数字
    // curr: 从左至右依次放入运算符，当前表达式字符串值
    // pos: 当前将要在电话号码中插入运算符，pos 是指将在哪个字符后插入
    // val: 当前表达式的运算后的值
    // last: 记录最近一次加减法的增量，相当于缓存高优先级的运算
    // res: 结果列表
    void dfs(String num, int target, String curr, int pos, long val, long last, List<String> res) {
        if (pos == num.length()) {
            if (val == target) {
                res.add(curr);
            }
            return;
        }
        for (int i = pos; i < num.length(); i++) {
            if (num.charAt(pos) == '0' && i != pos) {
                break;
            }
            String m = num.substring(pos, i + 1);
            long n = Long.parseLong(m);
            if (pos == 0) {
                // 0 + 第一个数
                dfs(num, target, curr + m, i + 1, n, n, res);
            }
            else {
                //加
                dfs(num, target, curr + "+" + m, i + 1, val + n, n, res);
                //减
                dfs(num, target, curr + "-" + m, i + 1, val - n, -n, res);
                //乘
                dfs(num, target, curr + "*" + m, i + 1, val - last + last * n, last * n, res);
                ////除
                // if (n != 0 && last % n == 0) {
                //     dfs(num, target, curr + "/" + m, i + 1, val - last + last / n, last / n, res);
                // }
            }
        }
    }
    
}

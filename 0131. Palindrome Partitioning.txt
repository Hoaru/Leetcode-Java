class Solution {

// Time Complexity: O(n^2)
// Space Complexity: O(n^2)

    public boolean judge(String s) {
        for (int i = 0, j = s.length() - 1; i < j; i++, j--) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
        }
        return true;
    }

    public void helper(String s, List<List<String>> res, ArrayList<String> curr) {
        if (s.equals("")) {
            res.add(curr);
        }
        else {
            for (int i = 0; i < s.length(); i++) {
                for (int j = i; j < s.length(); j++) {
                    String now = s.substring(i, j + 1);
                    if (judge(now)) {
                        ArrayList<String> newCurr = new ArrayList<>(curr);
                        newCurr.add(now);
                        helper(s.substring(j + 1), res, newCurr);
                    }
                }
            }
        } 
    }

    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        helper(s, res, new ArrayList<>());
        return res;
    }
}

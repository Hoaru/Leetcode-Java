class Solution {
    // public boolean canFinish(int numCourses, int[][] prerequisites){
    //     int sum = 0;
    //     int[] inDegree = new int[numCourses];
    //     for(int[] i: prerequisites) {
    //         inDegree[i[0]]++;
    //     }
    //     Queue<Integer> qu = new LinkedList<>();
    //     for(int i = 0; i < inDegree.length; i++) {
    //         if(inDegree[i] == 0) {
    //             qu.add(i);
    //         }
    //     }
    //     while(!qu.isEmpty()) {
    //         int pre = qu.poll();
    //         sum++;
    //         for(int[] i: prerequisites) {
    //             if(i[1] == pre) {
    //                 inDegree[i[0]]--;
    //                 if(inDegree[i[0]] == 0) {
    //                     qu.add(i[0]);
    //                 }
    //             }
    //         }
    //     }
    //     return sum == numCourses;
    // }

    public boolean dfs(int i, boolean[] visiting, ArrayList<Integer>[] arr) {
        if(arr[i] == null) {
            return true;
        }
        //出现闭环
        else if(visiting[i] == true) {
            return false;
        }
        else {
            visiting[i] = true;
            for(int e: arr[i]) {
                if(!dfs(e, visiting, arr)) {
                    return false;
                }
            }
            visiting[i] = false;
            arr[i] = null;
            return true;
        }
    }
    public boolean canFinish(int n, int[][] prerequisites) {
        boolean[] visiting = new boolean[n];
        ArrayList<Integer>[] arr = new ArrayList[n];
        for(int[] e: prerequisites) {
            int now = e[0];
            int pre = e[1];
            if(arr[now] == null) {
                arr[now] = new ArrayList<>();
            }
            arr[now].add(pre);
        }
        for(int i = 0; i < n; i++) {
            if(!dfs(i, visiting, arr)) {
                return false;
            }
        }
        return true;
    }
}

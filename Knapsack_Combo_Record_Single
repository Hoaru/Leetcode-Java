/*Given a set of candidate numbers (C) and a target number (T), find all unique
combinations in C where the candidate numbers sum to T. The same repeated number
may be chosen from C only once.

Define the problem as (items, sum): 
Pick => (items, sum-items[0])
Drop => (items[1:], sum)
*/
import java.util.*;
public class Main {

    public static void helper(int[] candidates, int target, int index, ArrayList<Integer> curr, ArrayList<ArrayList<Integer>> res) {
        if (target < 0) {
            return;
        }
        else if (target == 0) {
            res.add(new ArrayList<>(curr));
        }
        else {
            for (int i = index; i < candidates.length; i++) {
                curr.add(candidates[i]);
                helper(candidates, target - candidates[i], i + 1, curr, res);
                curr.remove(curr.size() - 1);
            }
        }
    }

    public static ArrayList<ArrayList<Integer>> knapsack(int[] candidates, int target) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        helper(candidates, target, 0, new ArrayList<>(), res);
        return res;
    }

    public static void main(String[] args)
    {
        int[] candidates = {3,2,2,3,6,7};
        int target = 7;
        System.out.println(knapsack(candidates, target));
    }

}

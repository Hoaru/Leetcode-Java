/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {

    private int pIndex;

    public TreeNode helper(int[] in, int[] post, HashMap<Integer, Integer> map, int iStart, int iEnd) {
        if(pIndex < 0 || iStart > iEnd) {
            return null;
        }
        else if(iStart == iEnd) {
            return new TreeNode(post[pIndex--]);
        }
        else {
            int rootVal = post[pIndex--];
            int iMid = map.get(rootVal);
            TreeNode root = new TreeNode(rootVal);
            root.right = helper(in, post, map, iMid + 1, iEnd);
            root.left = helper(in, post, map, iStart, iMid - 1);
            return root;
        }
    }
    public TreeNode buildTree(int[] in, int[] post) {
        pIndex = in.length - 1;
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < post.length; i++) {
            map.put(in[i], i);
        }
        return helper(in, post, map, 0, in.length - 1);
    }
}

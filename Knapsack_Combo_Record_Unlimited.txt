/*Given a set of candidate numbers (C) and a target number (T), find all unique
combinations in C where the candidate numbers sum to T. All candidate numbers
are unique. The same repeated number may be chosen from C unlimitedly.
*/
import java.util.*;
public static void helper(int[] candidates, int target, int index, ArrayList<Integer> curr, ArrayList<ArrayList<Integer>> res) {
        if (target < 0) {
            return;
        }
        else if (target == 0) {
            res.add(new ArrayList<>(curr));
        }
        else {
            for (int i = index; i < candidates.length; i++) {
                curr.add(candidates[i]);
                helper(candidates, target - candidates[i], i, curr, res);
                curr.remove(curr.size() - 1);
            }
        }
    }

    public static ArrayList<ArrayList<Integer>> knapsack(int[] candidates, int target) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        for (int i = 0; i < candidates.length; i++) {
            ArrayList curr = new ArrayList<>();
            curr.add(candidates[i]);
            helper(candidates, target - candidates[i], i, curr, res);
        }
        return res;
    }

    public static void main(String[] args)
    {
        int[] candidates = {1,3,2,6,7};
        int target = 7;
        System.out.println(knapsack(candidates, target));
    }


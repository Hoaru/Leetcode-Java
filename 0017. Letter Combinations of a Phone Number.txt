class Solution {
    
    public List<String> letterCombinations(String digits) {
        ArrayList<String> res = new ArrayList<>();
        int n = digits.length();
        if (n == 0) {
            return res;
        }
        HashMap<Character, List<Character>> map = new HashMap<>();
        map.put('2', Arrays.asList('a', 'b', 'c'));
        map.put('3', Arrays.asList('d', 'e', 'f'));
        map.put('4', Arrays.asList('g', 'h', 'i'));
        map.put('5', Arrays.asList('j', 'k', 'l'));
        map.put('6', Arrays.asList('m', 'n', 'o'));
        map.put('7', Arrays.asList('p', 'q', 'r', 's'));
        map.put('8', Arrays.asList('t', 'u', 'v'));
        map.put('9', Arrays.asList('w', 'x', 'y', 'z'));
        StringBuilder sb = new StringBuilder(digits);
        Queue<StringBuilder> qu = new LinkedList<>();
        qu.add(sb);
        int i = 0;
        while (!qu.isEmpty()) {
            Queue<StringBuilder> newQu = new LinkedList<>();
            while (!qu.isEmpty()) {
                StringBuilder top = qu.poll();
                char first = top.charAt(i);
                for (char c : map.get(first)) {
                    StringBuilder next = new StringBuilder(top);
                    next.setCharAt(i, c);
                    newQu.add(next);
                }
            }
            qu = newQu;
            i++;
            if (i == n) {
                for (StringBuilder e : qu) {
                    res.add(e.toString());
                }
                break;
            }
        }
        return res;
    }
}

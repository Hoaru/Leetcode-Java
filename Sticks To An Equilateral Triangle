import java.util.*;

public class Main {

/*You have several sticks whose lengths may not be identical, what you need to do is to
decide if those sticks can make one Equilateral triangle (Triangle with same length of all
sides). You have to use up all the sticks and cannot break any of them. You output will be
true or false

Note: The problem of recursion limit would arise if python is used. It is allowed to set the
recursion limit using the sys module.

输入样例：
[1,1,1]
输出样例：
true
 */

    public static int getEdge(int[] sticks){
        int sum = 0;
        for(int i : sticks){
            if(i < 0) return -1;
            else sum += i;
        }
        if(sum % 3 == 0) return sum / 3;
        else return -1;
    }

    public static boolean helper(int[] nums, int target, int[] sticks, int index){
        if(index == nums.length){
            if(sticks[0] == target && sticks[1] == target)
                return true;
            return false;
        }
        else{
            for(int i = 0; i < 3; i++){
                if(sticks[i] + nums[index] > target) continue;
                sticks[i] += nums[index];
                if(helper(nums, target, sticks, index + 1) == true)
                    return true;
                else sticks[i] -= nums[index];
            }
            return false;
        }
    }

    public static boolean canFormTriangle(int[] nums){
        Arrays.sort(nums);
        int target = getEdge(nums);
        if(target == -1) return false;
        else{
            int[] sticks = new int[3];
            return helper(nums, target, sticks, 0);
        }
    }


    public static void main(String[] args)
    {
        int[] sticks = {1,2,3,5,6,7};
        System.out.println(canFormTriangle(sticks));
        System.exit(0);
        //System.out.println();
    }
}


import java.util.*;

public class Main {

/*You have several sticks whose lengths may not be identical, what you need to do is to
decide if those sticks can make one Equilateral triangle (Triangle with same length of all
sides). You have to use up all the sticks and cannot break any of them. You output will be
true or false

Note: The problem of recursion limit would arise if python is used. It is allowed to set the
recursion limit using the sys module.

输入样例：
[1,1,1]
输出样例：
true
 */

    public static int getEdge(int[] sticks){
        int sum = 0;
        for(int i : sticks){
            if(i < 0) return -1;
            else sum += i;
        }
        if(sum % 3 == 0) return sum / 3;
        else return -1;
    }

    public static boolean helper(ArrayList<Integer> nums, int _target, int target, int index, int flag){
        if(target == 0) return helper(new ArrayList<>(nums), _target, _target, 0, flag + 1);
        else if(flag == 2) return true;
        else if(target < 0 || nums.size() == 0 || index > nums.size() - 1)
            return false;
        else{
            for(int i = index; i < nums.size(); i++){
                ArrayList<Integer> newNums = new ArrayList<>(nums);
                newNums.remove(i);
                if(helper(newNums, _target, target - nums.get(i), i, flag))
                    return true;
            }
            return false;
        }
    }

    public static boolean canFormTriangle(int[] sticks){
        Arrays.sort(sticks);
        int target = getEdge(sticks);
        ArrayList<Integer> nums = new ArrayList<>();
        for(int i : sticks) nums.add(i);
        if(target == -1) return false;
        else return helper(nums, target, target, 0, 0);
    }

    public static void main(String[] args)
    {
        //int[] nums = {1,6,2,5,3,4};
        int[] nums = {1,1,3,4,5,6,7};
        System.out.println(canFormTriangle(nums));
        System.exit(0);
        //System.out.println();
    }
}

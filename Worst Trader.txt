import java.util.*;
import java.math.*;
public class Main {

    // for -
    private static ArrayList<BigInteger> arrHyphen = new ArrayList<>();

    private static ArrayList<StringBuilder> arrSB = new ArrayList<>();

    public static void ProcessSample(BigInteger sequence, char character)
    {
        /* complete your function and call this.mPrinter.OnMessageComplete when completing a message */

        //start
        if (arrSB.isEmpty()) {
            arrHyphen.add(sequence);
            arrSB.add(new StringBuilder());
        }
        else if (character == '-') {
            // check last
            BigInteger last = arrHyphen.get(arrHyphen.size() - 1);
            BigInteger abLen = sequence.subtract(last).subtract(new BigInteger("1"));
            int order = arrSB.size() - 1;
            StringBuilder sb = arrSB.get(order);
            if (new BigInteger(String.valueOf(sb.length())).equals(abLen)) {
                System.out.print(sb.toString());
                for (int i = 0; i <= order; i++) {
                    arrSB.remove(0);
                    arrHyphen.remove(0); // + 1
                }
            }
            //record now
            arrHyphen.add(sequence);
            arrSB.add(new StringBuilder(""));
        }
        else {
            if (sequence.subtract(arrHyphen.get(0)).compareTo(new BigInteger("0")) > 0) {
                //int order = 0;
                for (int i = 0; i < arrHyphen.size(); i++) {
                    if (arrHyphen.get(i).compareTo(sequence) > 0) {
                        //order = i - 1;
                        arrSB.get(i - 1).append(character);
                        break;
                    }
                }
                arrSB.get(arrSB.size() - 1).append(character);
            }
        }
    }

    public static void main(String[] args) {
        int num = 5;
        int highestOne = (Integer.highestOneBit(num) << 1) - 1;
        // ~ num = 1101
        System.out.print(~num);
    }
}
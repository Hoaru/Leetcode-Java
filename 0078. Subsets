class Solution {
    // public List<List<Integer>> subsets(int[] nums) {
    //     List<List<Integer>> res = new ArrayList<>();
    //     helper(res, new ArrayList<>(), nums, 0);
    //     return res;
    // }

    // public void helper(List<List<Integer>> res, List<Integer> curr, int[] nums, int index) {
    //     if (index == nums.length) {
    //         res.add(new ArrayList<>(curr));
    //         return;
    //     }
    //     else {
    //         curr.add(nums[index]);
    //         helper(res, curr, nums, index + 1);
    //         curr.remove(curr.size() - 1);
    //         helper(res, curr, nums, index + 1);
    //         return;
    //     }
        
    // }

    public void helper(List<List<Integer>> res, List<Integer> curr, int[] nums, int index) {
        if (index >= nums.length + 1) {}
        else {
            res.add(new ArrayList<>(curr));
            for (int i = index; i < nums.length; i++) {
                curr.add(nums[i]);
                helper(res, curr, nums, i + 1);
                curr.remove(curr.size() - 1);
            }
        }
    }

    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res= new ArrayList<>();
        helper(res, new ArrayList<>(), nums, 0);
        return res;
    }
}

A password string PWD, consists of binary characters (0s and 1s) A cyber security expert is trying to determine the minimum number of changes required to make the password secure. To do so, it must be divided into substrings of non-overlapping, even length substrings. Each substring can only contain 1s or 0s, not a mix. This helps to ensure that the password is strong and less vulnerable to hacking attacks.

Find the minimum number of characters that must be flipped in the password string, i.e.
changed from 0 to 1 or 1 to 0 to allow the string to be divided as described.

Example:
PWD = 1110011000
PWD ->1111000000/1111111100/1100000000...
res = 3


import java.util.*;
public class Main {
    public static int getMinFLips(String s) {
        int res = 0;
        for (int i = 0; i + 1 < s.length(); i += 2) {
            String curr = s.substring(i, i + 2);
            if (curr.equals("01") || curr.equals("10")) {
                res++;
            }
        }
        return res;
    }

    public static void main(String[] args) {
        System.out.print(getMinFLips("1110011000"));
    }
}

class Solution {

    public int binarySearch(int[] nums, int target, int l, int r) {
        if (l > r) {
            return -1;
        }
        int m = l + (r - l) / 2;
        if (target > nums[m]) {
            return binarySearch(nums, target, m + 1, r);
        }
        else if (target < nums[m]) {
            return binarySearch(nums, target, l, m - 1);
        }
        else {
            return m;
        }
    }

    public int[] searchRange(int[] nums, int target) {
        int[] res = new int[]{-1, -1};
        int n = nums.length;
        if (n == 0) {
            return res;
        }
        int index = binarySearch(nums, target, 0, n - 1);
        if (index == -1) {
            return res;
        }
        int i = index;
        while (i > -1 && nums[i] == nums[index]) {
            i--;
        }
        res[0] = i + 1;
        i = index;
        while (i < n && nums[i] == nums[index]) {
            i++;
        }
        res[1] = i - 1;
        return res;
    }
}
